{"data":{"pages":{"nodes":[{"path":"/dev-404-page/","docpocalypse":null},{"path":"/","docpocalypse":{"title":null}}]},"api":{"nodes":[{"type":"hook","name":"useAnimationFrame","packageName":"@restart/hooks","importName":"import useAnimationFrame from '@restart/hooks/useAnimationFrame'","tags":[]},{"type":"hook","name":"useCallbackRef","packageName":"@restart/hooks","importName":"import useCallbackRef from '@restart/hooks/useCallbackRef'","tags":[{"name":"category","value":"refs"}]},{"type":"hook","name":"useCommittedRef","packageName":"@restart/hooks","importName":"import useCommittedRef from '@restart/hooks/useCommittedRef'","tags":[{"name":"param","value":"The `Ref` value"}]},{"type":"hook","name":"useCustomEffect","packageName":"@restart/hooks","importName":"import useCustomEffect from '@restart/hooks/useCustomEffect'","tags":[{"name":"param","value":"The effect callback"},{"name":"param","value":"A list of dependencies"},{"name":"param","value":"A function comparing the next and previous dependencyLists"},{"name":"param","value":"The effect callback"},{"name":"param","value":"A list of dependencies"},{"name":"param","value":null},{"name":"param","value":"A function comparing the next and previous dependencyLists"},{"name":"param","value":"the underlying effect hook used, defaults to useEffect"}]},{"type":"hook","name":"useDebouncedCallback","packageName":"@restart/hooks","importName":"import useDebouncedCallback from '@restart/hooks/useDebouncedCallback'","tags":[{"name":"param","value":"a function that will be debounced"},{"name":"param","value":"The milliseconds delay before invoking the function"}]},{"type":"hook","name":"useDebouncedState","packageName":"@restart/hooks","importName":"import useDebouncedState from '@restart/hooks/useDebouncedState'","tags":[{"name":"param","value":"initial state value"},{"name":"param","value":"The milliseconds delay before a new value is set"}]},{"type":"hook","name":"useDebouncedValue","packageName":"@restart/hooks","importName":"import useDebouncedValue from '@restart/hooks/useDebouncedValue'","tags":[{"name":"param","value":null},{"name":"param","value":null},{"name":"returns","value":null}]},{"type":"hook","name":"useEventCallback","packageName":"@restart/hooks","importName":"import useEventCallback from '@restart/hooks/useEventCallback'","tags":[]},{"type":"hook","name":"useEventListener","packageName":"@restart/hooks","importName":"import useEventListener from '@restart/hooks/useEventListener'","tags":[{"name":"param","value":"The target to listen for events on"},{"name":"param","value":"The DOM event name"},{"name":"param","value":"An event handler"},{"name":"param","value":"Whether or not to listen during the capture event phase"}]},{"type":"hook","name":"useFocusManager","packageName":"@restart/hooks","importName":"import useFocusManager from '@restart/hooks/useFocusManager'","tags":[{"name":"returns","value":"a memoized FocusController containing event handlers"}]},{"type":"hook","name":"useForceUpdate","packageName":"@restart/hooks","importName":"import useForceUpdate from '@restart/hooks/useForceUpdate'","tags":[]},{"type":"hook","name":"useGlobalListener","packageName":"@restart/hooks","importName":"import useGlobalListener from '@restart/hooks/useGlobalListener'","tags":[{"name":"param","value":"The DOM event name"},{"name":"param","value":"An event handler"},{"name":"param","value":"Whether or not to listen during the capture event phase"}]},{"type":"hook","name":"useImage","packageName":"@restart/hooks","importName":"import useImage from '@restart/hooks/useImage'","tags":[{"name":"param","value":"The `HtmlImageElement` or image url to load"},{"name":"param","value":"The `crossorigin` attribute to set\n\n```ts\nconst { image, error } = useImage('/static/kittens.png')\nconst ref = useRef<HTMLCanvasElement>()\n\nuseEffect(() => {\n  const ctx = ref.current.getContext('2d')\n\n  if (image) {\n    ctx.drawImage(image, 0, 0)\n  }\n}, [ref, image])\n\nreturn (\n  <>\n    {error && \"there was a problem loading the image\"}\n    <canvas ref={ref} />\n  </>\n```"}]},{"type":"hook","name":"useImmediateUpdateEffect","packageName":"@restart/hooks","importName":"import useImmediateUpdateEffect from '@restart/hooks/useImmediateUpdateEffect'","tags":[{"name":"category","value":"effects"}]},{"type":"hook","name":"useIntersectionObserver","packageName":"@restart/hooks","importName":"import useIntersectionObserver from '@restart/hooks/useIntersectionObserver'","tags":[{"name":"param","value":"The DOM element to observe"},{"name":"param","value":"IntersectionObserver options with a notable change,\nunlike a plain IntersectionObserver `root: null` means \"not provided YET\",\nand the hook will wait until it receives a non-null value to set up the observer.\nThis change allows for easier syncing of element and root values in a React\ncontext."},{"name":"param","value":"The DOM element to observe"},{"name":"param","value":"A listener for intersection updates."},{"name":"param","value":"IntersectionObserver options with a notable change,\nunlike a plain IntersectionObserver `root: null` means \"not provided YET\",\nand the hook will wait until it receives a non-null value to set up the observer.\nThis change allows for easier syncing of element and root values in a React\ncontext."}]},{"type":"hook","name":"useInterval","packageName":"@restart/hooks","importName":"import useInterval from '@restart/hooks/useInterval'","tags":[{"name":"param","value":"an function run on each interval"},{"name":"param","value":"The milliseconds duration of the interval"},{"name":"param","value":"an function run on each interval"},{"name":"param","value":"The milliseconds duration of the interval"},{"name":"param","value":"Whether or not the interval is currently running"},{"name":"param","value":"an function run on each interval"},{"name":"param","value":"The milliseconds duration of the interval"},{"name":"param","value":"Whether or not the interval is currently running"},{"name":"param","value":"Whether to run the function immediately on mount or unpause\nrather than waiting for the first interval to elapse"}]},{"type":"hook","name":"useMap","packageName":"@restart/hooks","importName":"import useMap from '@restart/hooks/useMap'","tags":[{"name":"param","value":"initial Map entries"}]},{"type":"hook","name":"useMediaQuery","packageName":"@restart/hooks","importName":"import useMediaQuery from '@restart/hooks/useMediaQuery'","tags":[{"name":"param","value":"A media query"}]},{"type":"hook","name":"useMergeState","packageName":"@restart/hooks","importName":"import useMergeState from '@restart/hooks/useMergeState'","tags":[{"name":"param","value":"The initial state object"}]},{"type":"hook","name":"useMergeStateFromProps","packageName":"@restart/hooks","importName":"import useMergeStateFromProps from '@restart/hooks/useMergeStateFromProps'","tags":[]},{"type":"hook","name":"useMergedRefs","packageName":"@restart/hooks","importName":"import useMergedRefs from '@restart/hooks/useMergedRefs'","tags":[{"name":"param","value":"A Callback or mutable Ref"},{"name":"param","value":"A Callback or mutable Ref"},{"name":"category","value":"refs"}]},{"type":"hook","name":"useMountEffect","packageName":"@restart/hooks","importName":"import useMountEffect from '@restart/hooks/useMountEffect'","tags":[{"name":"param","value":"An effect to run on mount"},{"name":"category","value":"effects"}]},{"type":"hook","name":"useMounted","packageName":"@restart/hooks","importName":"import useMounted from '@restart/hooks/useMounted'","tags":[{"name":"returns","value":"a function that returns the current isMounted state of the component\n\n```ts\nconst [data, setData] = useState(null)\nconst isMounted = useMounted()\n\nuseEffect(() => {\n  fetchdata().then((newData) => {\n     if (isMounted()) {\n       setData(newData);\n     }\n  })\n})\n```"}]},{"type":"hook","name":"useMutationObserver","packageName":"@restart/hooks","importName":"import useMutationObserver from '@restart/hooks/useMutationObserver'","tags":[{"name":"param","value":"The DOM element to observe"},{"name":"param","value":"The observer configuration"},{"name":"param","value":"A callback fired when a mutation occurs"},{"name":"param","value":"The DOM element to observe"},{"name":"param","value":"The observer configuration"}]},{"type":"hook","name":"usePrevious","packageName":"@restart/hooks","importName":"import usePrevious from '@restart/hooks/usePrevious'","tags":[{"name":"param","value":"the value to track"}]},{"type":"hook","name":"useRafInterval","packageName":"@restart/hooks","importName":"import useRafInterval from '@restart/hooks/useRafInterval'","tags":[]},{"type":"hook","name":"useRefWithInitialValueFactory","packageName":"@restart/hooks","importName":"import useRefWithInitialValueFactory from '@restart/hooks/useRefWithInitialValueFactory'","tags":[{"name":"param","value":"A factory function returning the ref's default value"},{"name":"category","value":"refs"}]},{"type":"hook","name":"useResizeObserver","packageName":"@restart/hooks","importName":"import useResizeObserver from '@restart/hooks/useResizeObserver'","tags":[{"name":"param","value":"The DOM element to observe"}]},{"type":"hook","name":"useSafeState","packageName":"@restart/hooks","importName":"import useSafeState from '@restart/hooks/useSafeState'","tags":[{"name":"param","value":"The return value of a useStateHook\n\n```ts\nconst [show, setShow] = useSafeState(useState(true));\n```"}]},{"type":"hook","name":"useSet","packageName":"@restart/hooks","importName":"import useSet from '@restart/hooks/useSet'","tags":[{"name":"param","value":"initial Set values"}]},{"type":"hook","name":"useStableMemo","packageName":"@restart/hooks","importName":"import useStableMemo from '@restart/hooks/useStableMemo'","tags":[{"name":"param","value":"A function that returns a value to be memoized"},{"name":"param","value":"A dependency array"}]},{"type":"hook","name":"useStateAsync","packageName":"@restart/hooks","importName":"import useStateAsync from '@restart/hooks/useStateAsync'","tags":[{"name":"param","value":"initialize with some state value same as `useState`"}]},{"type":"hook","name":"useThrottledEventHandler","packageName":"@restart/hooks","importName":"import useThrottledEventHandler from '@restart/hooks/useThrottledEventHandler'","tags":[{"name":"param","value":"An event handler function"},{"name":"typeParam","value":"TEvent The event object passed to the handler function"},{"name":"returns","value":"The event handler with a `clear` method attached for clearing any in-flight handler calls"}]},{"type":"hook","name":"useTimeout","packageName":"@restart/hooks","importName":"import useTimeout from '@restart/hooks/useTimeout'","tags":[]},{"type":"hook","name":"useToggleState","packageName":"@restart/hooks","importName":"import useToggleState from '@restart/hooks/useToggleState'","tags":[{"name":"param","value":"The initial boolean value"},{"name":"returns","value":"A tuple of the current state and a setter\n\n```jsx\nconst [show, toggleShow] = useToggleState(false)\n\nreturn (\n  <>\n    <button onClick={() => toggleShow()}>\n      Toggle\n    <button>\n\n    {show && <strong>Now you can see me</strong>}\n  </>\n)\n\n```"}]},{"type":"hook","name":"useUpdateEffect","packageName":"@restart/hooks","importName":"import useUpdateEffect from '@restart/hooks/useUpdateEffect'","tags":[{"name":"param","value":"An effect to run on mount"},{"name":"category","value":"effects"}]},{"type":"hook","name":"useUpdatedRef","packageName":"@restart/hooks","importName":"import useUpdatedRef from '@restart/hooks/useUpdatedRef'","tags":[{"name":"param","value":"The Ref value"},{"name":"category","value":"refs"}]},{"type":"hook","name":"useWillUnmount","packageName":"@restart/hooks","importName":"import useWillUnmount from '@restart/hooks/useWillUnmount'","tags":[{"name":"param","value":"Handler to run when the component unmounts"},{"name":"category","value":"effects"}]},{"type":"hook","name":"useBreakpoint","packageName":"@restart/hooks","importName":"import useBreakpoint from '@restart/hooks/useBreakpoint'","tags":[{"name":"param","value":"An object map of breakpoints and directions, queries are constructed using \"and\" to join\nbreakpoints together"},{"name":"param","value":"The breakpoint key"},{"name":"param","value":"A direction 'up' for a max, 'down' for min, true to match only the breakpoint"}]}]}}}