{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useMediaQuery","result":{"data":{"docpocalypse":{"id":"88bb0c5d-57f0-51c0-9173-6ed8cc77c215","tsType":{"id":"e3dfb087-d52c-5f5f-a3f8-cc304238ad06","name":"useMediaQuery","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"e7e7efef-a16b-5b90-bd4e-705b9f209156","name":"useMediaQuery","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Match a media query and get updates as the match changes. The media string is\npassed directly to `window.matchMedia` and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.","text":"```tsx\nfunction Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n```\n\nMedia query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.\n"},"parameters":[{"id":"c6344eaa-252f-5541-a577-e4550dda5ee6","name":"query","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"comment":{"text":"A media query\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"null"}]},"parent":"e7e7efef-a16b-5b90-bd4e-705b9f209156","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"a1fd597b-8db2-5698-8c79-047424064235","parent":"c6344eaa-252f-5541-a577-e4550dda5ee6","mdx":{"id":"bd9f1d06-ab36-5855-80ef-37166de27950","parent":"a1fd597b-8db2-5698-8c79-047424064235","frontmatter":{"title":""},"exports":{},"rawBody":"A media query\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A media query\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"3d27a59e-a7d0-50de-8e35-d530d276ff43","parent":"a1fd597b-8db2-5698-8c79-047424064235","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"A media query\n","html":"<p>A media query</p>"}}}],"type":{"type":"intrinsic","name":"boolean"},"parent":"e3dfb087-d52c-5f5f-a3f8-cc304238ad06","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useMediaQuery.tsx","description":{"id":"8d618939-efa6-5028-b9b9-cdc135890fd1","parent":"e7e7efef-a16b-5b90-bd4e-705b9f209156","mdx":{"id":"39a4529e-7eed-5c7e-905b-1ef0e45132cb","parent":"8d618939-efa6-5028-b9b9-cdc135890fd1","frontmatter":{"title":""},"exports":{},"rawBody":"Match a media query and get updates as the match changes. The media string is\npassed directly to `window.matchMedia` and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.\n```tsx\nfunction Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n```\n\nMedia query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Match a media query and get updates as the match changes. The media string is\\npassed directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" and run as a Layout Effect, so initial\\nmatches are returned before the browser has a chance to paint.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"function Page() {\\n  const isWide = useMediaQuery('min-width: 1000px')\\n\\n  return isWide ? \\\"very wide\\\" : 'not so wide'\\n}\\n\")), mdx(\"p\", null, \"Media query lists are also reused globally, hook calls for the same query\\nwill only create a matcher once under the hood.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"21d395bb-6cb6-5d81-94dd-40217503821f","parent":"8d618939-efa6-5028-b9b9-cdc135890fd1","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Match a media query and get updates as the match changes. The media string is\npassed directly to `window.matchMedia` and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.\n```tsx\nfunction Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n```\n\nMedia query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.\n","html":"<p>Match a media query and get updates as the match changes. The media string is\npassed directly to <code>window.matchMedia</code> and run as a Layout Effect, so initial\nmatches are returned before the browser has a chance to paint.</p>\n<pre><code class=\"language-tsx\">function Page() {\n  const isWide = useMediaQuery('min-width: 1000px')\n\n  return isWide ? \"very wide\" : 'not so wide'\n}\n</code></pre>\n<p>Media query lists are also reused globally, hook calls for the same query\nwill only create a matcher once under the hood.</p>"}}}],"parent":"7fc60aad-f88c-561e-83bf-c9917f744da3","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useMediaQuery.tsx"},"type":"hook","name":"useMediaQuery","packageName":"@restart/hooks","importName":"import useMediaQuery from '@restart/hooks/useMediaQuery'","tags":[{"name":"param","value":"A media query"}],"example":null,"signatures":[{"kind":"function","name":"useMediaQuery","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Match a media query and get updates as the match changes. The media string is\\npassed directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" and run as a Layout Effect, so initial\\nmatches are returned before the browser has a chance to paint.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"function Page() {\\n  const isWide = useMediaQuery('min-width: 1000px')\\n\\n  return isWide ? \\\"very wide\\\" : 'not so wide'\\n}\\n\")), mdx(\"p\", null, \"Media query lists are also reused globally, hook calls for the same query\\nwill only create a matcher once under the hood.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"query","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A media query\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":null,"type":"UnionType","elements":[{"type":"NameExpression","name":"string","typeDef___NODE":null},{"type":"NullLiteral"}],"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":null,"members":{"static":null}}]}},"pageContext":{"nodeId":"88bb0c5d-57f0-51c0-9173-6ed8cc77c215","exampleId":null}}}