{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useCommittedRef","result":{"data":{"docpocalypse":{"id":"abe52fa1-d6c7-50f4-8be9-73d8aafedb5f","tsType":{"id":"859d26e7-6b79-527b-9c82-51212e25a53b","name":"useCommittedRef","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"a4916381-3a46-5dc7-a918-11bd15914407","name":"useCommittedRef","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a `Ref` whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in `render()` may be discarded before being used.","text":"This is safe to access in an event handler.\n"},"typeParameter":[{"id":"2f0c4bce-dfa0-5fcd-91ef-b3813cbbff6b","name":"TValue","kind":131072,"kindString":"Type parameter","flags":{},"parent":"a4916381-3a46-5dc7-a918-11bd15914407","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"parameters":[{"id":"80cc3f95-9b9e-5860-bb2c-0fa68a16ace5","name":"value","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The `Ref` value\n"},"type":{"type":"typeParameter","name":"TValue"},"parent":"a4916381-3a46-5dc7-a918-11bd15914407","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"72a792e8-70b2-58a6-8ecd-5ed72a6d5a0c","parent":"80cc3f95-9b9e-5860-bb2c-0fa68a16ace5","mdx":{"id":"d61d6247-0a98-548a-9be2-4037809c92d8","parent":"72a792e8-70b2-58a6-8ecd-5ed72a6d5a0c","frontmatter":{"title":""},"exports":{},"rawBody":"The `Ref` value\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" value\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"61f16c2e-89d7-5055-8094-ed5afc716417","parent":"72a792e8-70b2-58a6-8ecd-5ed72a6d5a0c","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"The `Ref` value\n","html":"<p>The <code>Ref</code> value</p>"}}}],"type":{"type":"reference","typeArguments":[{"type":"typeParameter","name":"TValue"}],"name":"MutableRefObject"},"parent":"859d26e7-6b79-527b-9c82-51212e25a53b","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useCommittedRef.ts","description":{"id":"1d913963-0fe5-520e-a8ff-353c36ad30ce","parent":"a4916381-3a46-5dc7-a918-11bd15914407","mdx":{"id":"aff99d1f-a0d5-54f4-8e91-08b4c5caae14","parent":"1d913963-0fe5-520e-a8ff-353c36ad30ce","frontmatter":{"title":""},"exports":{},"rawBody":"Creates a `Ref` whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in `render()` may be discarded before being used.\nThis is safe to access in an event handler.\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" whose value is updated in an effect, ensuring the most recent\\nvalue is the one rendered with. Generally only required for Concurrent mode usage\\nwhere previous work in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" may be discarded before being used.\\nThis is safe to access in an event handler.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"e9413e79-09ca-54da-a404-b8f7bc10d938","parent":"1d913963-0fe5-520e-a8ff-353c36ad30ce","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Creates a `Ref` whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in `render()` may be discarded before being used.\nThis is safe to access in an event handler.\n","html":"<p>Creates a <code>Ref</code> whose value is updated in an effect, ensuring the most recent\nvalue is the one rendered with. Generally only required for Concurrent mode usage\nwhere previous work in <code>render()</code> may be discarded before being used.\nThis is safe to access in an event handler.</p>"}}}],"parent":"c33119bc-fcbc-5f2a-8cb5-ba841be1bf5b","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useCommittedRef.ts"},"type":"hook","name":"useCommittedRef","packageName":"@restart/hooks","importName":"import useCommittedRef from '@restart/hooks/useCommittedRef'","tags":[{"name":"param","value":"The `Ref` value"}],"example":null,"signatures":[{"kind":"function","name":"useCommittedRef","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" whose value is updated in an effect, ensuring the most recent\\nvalue is the one rendered with. Generally only required for Concurrent mode usage\\nwhere previous work in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" may be discarded before being used.\"), mdx(\"p\", null, \"This is safe to access in an event handler.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"value","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ref\"), \" value\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":"TValue","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"TypeApplication","elements":null,"expression":{"type":"NameExpression","name":"React.MutableRefObject","typeDef___NODE":null},"applications":[{"type":"NameExpression","name":"TValue","typeDef___NODE":null}]}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"abe52fa1-d6c7-50f4-8be9-73d8aafedb5f","exampleId":null}}}