{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useIntersectionObserver","result":{"data":{"docpocalypse":{"id":"3cbb1f7a-51a2-5dda-8824-f91d96e57b59","tsType":{"id":"d4b180a8-7a43-543f-86d0-1681060e9f3f","name":"useIntersectionObserver","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"0d12fc92-1b56-547c-8102-f96860cb55c7","name":"useIntersectionObserver","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element that returns it's entries as they arrive."},"typeParameter":[{"id":"96ad0a0c-6820-5856-ab89-e5647e606622","name":"TElement","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","name":"Element"},"parent":"0d12fc92-1b56-547c-8102-f96860cb55c7","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"parameters":[{"id":"e1a7922c-2e27-5e2c-8aa8-16dff29d9017","name":"element","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The DOM element to observe"},"type":{"type":"union","types":[{"type":"typeParameter","name":"TElement","constraint":{"type":"reference","name":"Element"}},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]},"parent":"0d12fc92-1b56-547c-8102-f96860cb55c7","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"58ef6e6b-eaca-51d9-9e24-7959982e330c","parent":"e1a7922c-2e27-5e2c-8aa8-16dff29d9017","mdx":{"id":"f5382359-3a70-5c56-a271-7bcf9f5f2e8d","parent":"58ef6e6b-eaca-51d9-9e24-7959982e330c","frontmatter":{"title":""},"exports":{},"rawBody":"The DOM element to observe","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The DOM element to observe\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"5ca69745-9008-5aa4-9488-64d0345f28a7","parent":"58ef6e6b-eaca-51d9-9e24-7959982e330c","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"The DOM element to observe","html":"<p>The DOM element to observe</p>"}}},{"id":"788b93ef-a547-539f-80b4-bd5a9ba2d7b1","name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"IntersectionObserverInit"},"parent":"0d12fc92-1b56-547c-8102-f96860cb55c7","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"array","elementType":{"type":"reference","name":"IntersectionObserverEntry"}},"parent":"d4b180a8-7a43-543f-86d0-1681060e9f3f","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useIntersectionObserver.ts","description":{"id":"06a603ea-5052-5ad7-8e3d-6e6accd30639","parent":"0d12fc92-1b56-547c-8102-f96860cb55c7","mdx":{"id":"e9cc7e34-67f5-58a0-b006-7321ea15b4f4","parent":"06a603ea-5052-5ad7-8e3d-6e6accd30639","frontmatter":{"title":""},"exports":{},"rawBody":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element that returns it's entries as they arrive.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Setup an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"IntersectionObserver\")), \" on\\na DOM Element that returns it's entries as they arrive.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"31e21226-8c16-5afb-b398-5c0f821724c9","parent":"06a603ea-5052-5ad7-8e3d-6e6accd30639","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element that returns it's entries as they arrive.","html":"<p>Setup an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a> on\na DOM Element that returns it's entries as they arrive.</p>"}}},{"id":"db68117c-3615-51d6-9dd7-7d78372c262d","name":"useIntersectionObserver","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element. This overload does not trigger component updates when receiving new\nentries. This allows for finer grained performance optimizations by the consumer."},"typeParameter":[{"id":"fd52cfa7-90c8-5e50-9d39-31359f63fae6","name":"TElement","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","name":"Element"},"parent":"db68117c-3615-51d6-9dd7-7d78372c262d","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"parameters":[{"id":"6e2e9394-ecbf-59d6-8b45-a546c090ef6f","name":"element","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The DOM element to observe"},"type":{"type":"union","types":[{"type":"typeParameter","name":"TElement","constraint":{"type":"reference","name":"Element"}},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]},"parent":"db68117c-3615-51d6-9dd7-7d78372c262d","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"ea01c80d-5a24-511d-b82f-2a9bc31b5d29","parent":"6e2e9394-ecbf-59d6-8b45-a546c090ef6f","mdx":{"id":"26c2cabe-458d-589e-bd37-00aeb70b7346","parent":"ea01c80d-5a24-511d-b82f-2a9bc31b5d29","frontmatter":{"title":""},"exports":{},"rawBody":"The DOM element to observe","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The DOM element to observe\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"4510e876-9079-5c03-a4ef-64882b0d688f","parent":"ea01c80d-5a24-511d-b82f-2a9bc31b5d29","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"The DOM element to observe","html":"<p>The DOM element to observe</p>"}}},{"id":"ab6ecd0c-99ec-5037-91d6-c45cf4b55d9e","name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"A listener for intersection updates."},"type":{"type":"reference","name":"IntersectionObserverCallback"},"parent":"db68117c-3615-51d6-9dd7-7d78372c262d","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null,"description":{"id":"15183f97-e3bd-5396-a97d-6973782e085f","parent":"ab6ecd0c-99ec-5037-91d6-c45cf4b55d9e","mdx":{"id":"0221074d-c91a-593c-970e-a39cc55415d3","parent":"15183f97-e3bd-5396-a97d-6973782e085f","frontmatter":{"title":""},"exports":{},"rawBody":"A listener for intersection updates.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A listener for intersection updates.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"b9d831ae-accc-582a-85ee-ef4773f8f39c","parent":"15183f97-e3bd-5396-a97d-6973782e085f","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"A listener for intersection updates.","html":"<p>A listener for intersection updates.</p>"}}},{"id":"07c1be6b-e60a-5071-a18a-041d0e675687","name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"IntersectionObserverInit"},"parent":"db68117c-3615-51d6-9dd7-7d78372c262d","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":null}],"type":{"type":"intrinsic","name":"void"},"parent":"d4b180a8-7a43-543f-86d0-1681060e9f3f","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useIntersectionObserver.ts","description":{"id":"1647df78-1200-56b1-a6d6-b499135a2d8a","parent":"db68117c-3615-51d6-9dd7-7d78372c262d","mdx":{"id":"000d2c3b-7a06-5a33-a43d-a6e48b356331","parent":"1647df78-1200-56b1-a6d6-b499135a2d8a","frontmatter":{"title":""},"exports":{},"rawBody":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element. This overload does not trigger component updates when receiving new\nentries. This allows for finer grained performance optimizations by the consumer.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Setup an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"IntersectionObserver\")), \" on\\na DOM Element. This overload does not trigger component updates when receiving new\\nentries. This allows for finer grained performance optimizations by the consumer.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"36012c3f-6d8d-5e78-9232-b5a09aa4e4ce","parent":"1647df78-1200-56b1-a6d6-b499135a2d8a","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element. This overload does not trigger component updates when receiving new\nentries. This allows for finer grained performance optimizations by the consumer.","html":"<p>Setup an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a> on\na DOM Element. This overload does not trigger component updates when receiving new\nentries. This allows for finer grained performance optimizations by the consumer.</p>"}}}],"parent":"7b039004-b3a4-51cf-9163-2f71d6bbe3cb","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useIntersectionObserver.ts"},"type":"hook","name":"useIntersectionObserver","packageName":"@restart/hooks","importName":"import useIntersectionObserver from '@restart/hooks/useIntersectionObserver'","tags":[{"name":"param","value":"The DOM element to observe"},{"name":"param","value":"IntersectionObserver options with a notable change,\nunlike a plain IntersectionObserver `root: null` means \"not provided YET\",\nand the hook will wait until it receives a non-null value to set up the observer.\nThis change allows for easier syncing of element and root values in a React\ncontext."},{"name":"param","value":"The DOM element to observe"},{"name":"param","value":"A listener for intersection updates."},{"name":"param","value":"IntersectionObserver options with a notable change,\nunlike a plain IntersectionObserver `root: null` means \"not provided YET\",\nand the hook will wait until it receives a non-null value to set up the observer.\nThis change allows for easier syncing of element and root values in a React\ncontext."}],"example":null,"signatures":[{"kind":"function","name":"useIntersectionObserver","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Setup an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"IntersectionObserver\")), \" on\\na DOM Element that returns it's entries as they arrive.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"element","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The DOM element to observe\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":null,"type":"UnionType","elements":[{"type":"NameExpression","name":"TElement","typeDef___NODE":null},{"type":"NullLiteral"},{"type":"UndefinedLiteral"}],"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null},{"name":"options","description":null,"examples":null,"type":{"typeDef":null,"name":"IntersectionObserverInit","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":true,"params":null,"properties":null,"returns":null,"members":null},{"name":"init","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"IntersectionObserver options with a notable change,\\nunlike a plain IntersectionObserver \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root: null\"), \" means \\\"not provided YET\\\",\\nand the hook will wait until it receives a non-null value to set up the observer.\\nThis change allows for easier syncing of element and root values in a React\\ncontext.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":null,"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"TypeApplication","elements":null,"expression":{"type":"NameExpression","name":"Array","typeDef___NODE":null},"applications":[{"type":"NameExpression","name":"IntersectionObserverEntry","typeDef___NODE":null}]}}],"members":{"static":null}},{"kind":"function","name":"useIntersectionObserver","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Setup an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"IntersectionObserver\")), \" on\\na DOM Element. This overload does not trigger component updates when receiving new\\nentries. This allows for finer grained performance optimizations by the consumer.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":[{"name":"element","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The DOM element to observe\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":null,"type":"UnionType","elements":[{"type":"NameExpression","name":"TElement","typeDef___NODE":null},{"type":"NullLiteral"},{"type":"UndefinedLiteral"}],"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null},{"name":"callback","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A listener for intersection updates.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":{"typeDef":null,"name":"IntersectionObserverCallback","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":false,"params":null,"properties":null,"returns":null,"members":null},{"name":"options","description":null,"examples":null,"type":{"typeDef":null,"name":"IntersectionObserverInit","type":"NameExpression","elements":null,"expression":null,"applications":null},"optional":true,"params":null,"properties":null,"returns":null,"members":null},{"name":"init","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"IntersectionObserver options with a notable change,\\nunlike a plain IntersectionObserver \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root: null\"), \" means \\\"not provided YET\\\",\\nand the hook will wait until it receives a non-null value to set up the observer.\\nThis change allows for easier syncing of element and root values in a React\\ncontext.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":null,"type":null,"optional":false,"params":null,"properties":null,"returns":null,"members":null}],"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"VoidLiteral","elements":null,"expression":null,"applications":null}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"3cbb1f7a-51a2-5dda-8824-f91d96e57b59","exampleId":null}}}