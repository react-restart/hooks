{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useForceUpdate","result":{"data":{"docpocalypse":{"id":"7dc7add0-6b90-5e1e-bdbf-f3ea671f077b","tsType":{"id":"dfa51183-b536-5bf0-a849-8f541e2dd7c8","name":"useForceUpdate","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":"8b310bcc-2b43-5f39-acde-d910e3d99b33","name":"useForceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Returns a function that triggers a component update. the hook equivalent to\n`this.forceUpdate()` in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.","text":"```ts\nconst forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n```\n"},"type":{"type":"reflection","declaration":{"id":"031cf6f8-30e6-5eda-b8bd-09e2f16fc37e","name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":"181a05c3-0717-5af3-a762-40d1390329e2","name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"type":{"type":"intrinsic","name":"void"},"parent":"031cf6f8-30e6-5eda-b8bd-09e2f16fc37e","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useForceUpdate.ts"}],"parent":"8b310bcc-2b43-5f39-acde-d910e3d99b33","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useForceUpdate.ts"}},"parent":"dfa51183-b536-5bf0-a849-8f541e2dd7c8","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"signatures":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useForceUpdate.ts","description":{"id":"3d4f409e-12a5-58ec-98a9-fe4e017e83b6","parent":"8b310bcc-2b43-5f39-acde-d910e3d99b33","mdx":{"id":"0ef6be32-7f8d-574c-a8e9-69d4c5c66525","parent":"3d4f409e-12a5-58ec-98a9-fe4e017e83b6","frontmatter":{"title":""},"exports":{},"rawBody":"Returns a function that triggers a component update. the hook equivalent to\n`this.forceUpdate()` in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.\n```ts\nconst forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n```\n","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Returns a function that triggers a component update. the hook equivalent to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.forceUpdate()\"), \" in a class component. In most cases using a state value directly\\nis preferable but may be required in some advanced usages of refs for interop or\\nwhen direct DOM manipulation is required.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const forceUpdate = useForceUpdate();\\n\\nconst updateOnClick = useCallback(() => {\\n forceUpdate()\\n}, [forceUpdate])\\n\\nreturn <button type=\\\"button\\\" onClick={updateOnClick}>Hi there</button>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"id":"1bde299f-bbe1-5ab4-a2b1-0641ac201b61","parent":"3d4f409e-12a5-58ec-98a9-fe4e017e83b6","frontmatter":{"title":""},"excerpt":"","rawMarkdownBody":"Returns a function that triggers a component update. the hook equivalent to\n`this.forceUpdate()` in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.\n```ts\nconst forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n```\n","html":"<p>Returns a function that triggers a component update. the hook equivalent to\n<code>this.forceUpdate()</code> in a class component. In most cases using a state value directly\nis preferable but may be required in some advanced usages of refs for interop or\nwhen direct DOM manipulation is required.</p>\n<pre><code class=\"language-ts\">const forceUpdate = useForceUpdate();\n\nconst updateOnClick = useCallback(() => {\n forceUpdate()\n}, [forceUpdate])\n\nreturn &#x3C;button type=\"button\" onClick={updateOnClick}>Hi there&#x3C;/button>\n</code></pre>"}}}],"parent":"f748453c-069b-591e-a9cb-09b48655ae63","rootDir":"/Users/brianreed/iambriansreed/hooks/src","tsconfig":"/Users/brianreed/iambriansreed/hooks/tsconfig.json","typedocs":[],"parameters":[],"typeParameter":[],"groups":[],"absolutePath":"/Users/brianreed/iambriansreed/hooks/src/useForceUpdate.ts"},"type":"hook","name":"useForceUpdate","packageName":"@restart/hooks","importName":"import useForceUpdate from '@restart/hooks/useForceUpdate'","tags":[],"example":null,"signatures":[{"kind":"function","name":"useForceUpdate","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Returns a function that triggers a component update. the hook equivalent to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.forceUpdate()\"), \" in a class component. In most cases using a state value directly\\nis preferable but may be required in some advanced usages of refs for interop or\\nwhen direct DOM manipulation is required.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const forceUpdate = useForceUpdate();\\n\\nconst updateOnClick = useCallback(() => {\\n forceUpdate()\\n}, [forceUpdate])\\n\\nreturn <button type=\\\"button\\\" onClick={updateOnClick}>Hi there</button>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":null,"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"FunctionType","elements":null,"expression":null,"applications":null}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"7dc7add0-6b90-5e1e-bdbf-f3ea671f077b","exampleId":null}}}